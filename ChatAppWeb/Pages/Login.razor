@page "/Login"
@using System.Net
@using Core
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Client
<PageTitle>Login</PageTitle>

@if (failed)  //TODO figure out how to give the div the right size
{
    <div class="alert alert-danger" style="position: absolute; left: 0; right: 0; margin: auto 350px auto 350px; ">
        @errorMessage
    </div>
}

<div class="container" style="display: flex; align-items: center; margin-top: 150px;">
    <div class="firstHalf">
        <img alt="company logo" src="Pictures/CompanyLogo.png"/>

        <h1>For you, who want to connect with people</h1>

        <p>[Placeholder] helps you connect to the people you most want to talk to, without hassle, without securing your data because idk how to do that yet...</p>

        <div class="loginCard">
            <div>
                <input id="emailORphone" placeholder="Email or Phone number" @onchange="OnEmailPhoneChange">
                <p style="color: red">@emailOrPhoneError</p>
            </div>

            <div>
                <input id="password" placeholder="Password" type="password" @onchange="OnPasswordChange">
                <p style="color: red">@passwordError</p>
            </div>

            <div>
                <span>Don't have an account? <a href="/register">SIGN IN</a></span>
            </div>

            <div class="loginButtonDiv">
                <button @onclick="TryLogin" class="btn btn-primary" id="loginButton">Login</button>
                <span><a href="#">Forgot your password?</a></span>
            </div>
        </div>
    </div>

    <div class="pictureContainer">
        <img alt="Example use of chat app" src="Pictures/LoginPicture.png"/>
    </div>
    
</div>

<div class="container">
    <div class="footer">
        <div>
            <span>© MortyG</span>
        </div>
        <div>
            <a href="#">Protection of data (there is none)</a>
        </div>
        <div>
            <a href="#">Cookie policy</a>
        </div>
        <div>
            <a href="#">Terms of use</a>
        </div>
    </div>
</div>

@code {
    private User? _currentUser;
    
    private string emailOrPhone;
    private string emailOrPhoneError;
    
    private string Password;
    private string passwordError;
    
    private bool failed;
    string errorMessage = "";
    
    protected override async Task OnInitializedAsync()
    {
        _currentUser = await LocalStorage.GetItemAsync<User>("user");
        if(_currentUser != null)
            NavigationManager.NavigateTo("/");
    }

    private void OnPasswordChange(ChangeEventArgs e)
    {
        Password = (string)e.Value;
        passwordError = "";
    }
    
    private void OnEmailPhoneChange(ChangeEventArgs e)
    {
        emailOrPhone = (string)e.Value;
        emailOrPhoneError = "";
    }

    private async Task TryLogin()
    {

        if (string.IsNullOrWhiteSpace(Password) && string.IsNullOrWhiteSpace(emailOrPhone))
        {
            passwordError = "Password is required";
            emailOrPhoneError = "Phone or email is required";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(Password))
        {
            passwordError = "Password is required";
            return;
        }
        if (string.IsNullOrWhiteSpace(emailOrPhone))
        {
            emailOrPhoneError = "Phone or email is required";
            return;
        }
        
        var result = await Client.GetAsync($"auth/login/{emailOrPhone}/{Password}");
        if (result.IsSuccessStatusCode)
        {
            var user = await result.Content.ReadFromJsonAsync<User>();
            await LocalStorage.SetItemAsync("user", user);
            NavigationManager.NavigateTo("/");
        }

        if (result.StatusCode == HttpStatusCode.BadRequest)
        {
            errorMessage = "Server is down";
            failed = true;
            StateHasChanged();
            await Task.Delay(3000);
            failed = false;
            errorMessage = "";
            StateHasChanged();
        } else if (result.StatusCode == HttpStatusCode.Unauthorized)
        {
            errorMessage = "User credentials wrong";
            failed = true;
            StateHasChanged();
            await Task.Delay(3000);
            failed = false;
            errorMessage = "";
            StateHasChanged();
        }
        
    }

}